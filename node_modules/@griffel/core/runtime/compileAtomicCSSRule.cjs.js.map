{"version":3,"file":"compileAtomicCSSRule.cjs.js","sources":["../../../../packages/core/src/runtime/compileAtomicCSSRule.ts"],"sourcesContent":["import { hyphenateProperty } from './utils/hyphenateProperty';\nimport { normalizeNestedProperty } from './utils/normalizeNestedProperty';\nimport type { AtRules } from './utils/types';\nimport { compileCSSRules } from './compileCSSRules';\n\nexport interface CompileAtomicCSSOptions {\n  className: string;\n  selectors: string[];\n\n  property: string;\n  value: number | string | Array<number | string>;\n\n  rtlClassName?: string;\n  rtlProperty?: string;\n  rtlValue?: number | string | Array<number | string>;\n}\n\nconst PSEUDO_SELECTOR_REGEX = /,( *[^ &])/g;\n\n/**\n * Normalizes pseudo selectors to always contain &, requires to work properly with comma-separated selectors.\n *\n * @example\n *   \":hover\" => \"&:hover\"\n *   \" :hover\" => \"& :hover\"\n *   \":hover,:focus\" => \"&:hover,&:focus\"\n *   \" :hover, :focus\" => \"& :hover,& :focus\"\n */\nexport function normalizePseudoSelector(pseudoSelector: string): string {\n  return (\n    '&' +\n    normalizeNestedProperty(\n      // Regex there replaces a comma, spaces and an ampersand if it's present with comma and an ampersand.\n      // This allows to normalize input, see examples in JSDoc.\n      pseudoSelector.replace(PSEUDO_SELECTOR_REGEX, ',&$1'),\n    )\n  );\n}\n\nfunction createCSSRule(classNameSelector: string, cssDeclaration: string, pseudos: string[]): string {\n  let cssRule = cssDeclaration;\n\n  if (pseudos.length > 0) {\n    cssRule = pseudos.reduceRight((acc, selector) => {\n      return `${normalizePseudoSelector(selector)} { ${acc} }`;\n    }, cssDeclaration);\n  }\n\n  return `${classNameSelector}{${cssRule}}`;\n}\n\nexport function compileAtomicCSSRule(\n  options: CompileAtomicCSSOptions,\n  atRules: AtRules,\n): [string? /* ltr definition */, string? /* rtl definition */] {\n  const { className, selectors, property, rtlClassName, rtlProperty, rtlValue, value } = options;\n  const { container, layer, media, supports } = atRules;\n\n  const classNameSelector = `.${className}`;\n  const cssDeclaration = Array.isArray(value)\n    ? `${value.map(v => `${hyphenateProperty(property)}: ${v}`).join(';')};`\n    : `${hyphenateProperty(property)}: ${value};`;\n\n  let cssRule = createCSSRule(classNameSelector, cssDeclaration, selectors);\n\n  if (rtlProperty && rtlClassName) {\n    const rtlClassNameSelector = `.${rtlClassName}`;\n    const rtlCSSDeclaration = Array.isArray(rtlValue)\n      ? `${rtlValue.map(v => `${hyphenateProperty(rtlProperty)}: ${v}`).join(';')};`\n      : `${hyphenateProperty(rtlProperty)}: ${rtlValue};`;\n\n    cssRule += createCSSRule(rtlClassNameSelector, rtlCSSDeclaration, selectors);\n  }\n\n  if (media) {\n    cssRule = `@media ${media} { ${cssRule} }`;\n  }\n\n  if (layer) {\n    cssRule = `@layer ${layer} { ${cssRule} }`;\n  }\n\n  if (supports) {\n    cssRule = `@supports ${supports} { ${cssRule} }`;\n  }\n\n  if (container) {\n    cssRule = `@container ${container} { ${cssRule} }`;\n  }\n\n  return compileCSSRules(cssRule, true) as [string?, string?];\n}\n"],"names":["PSEUDO_SELECTOR_REGEX","normalizePseudoSelector","pseudoSelector","normalizeNestedProperty","replace","createCSSRule","classNameSelector","cssDeclaration","pseudos","cssRule","length","reduceRight","acc","selector","compileAtomicCSSRule","options","atRules","className","selectors","property","rtlClassName","rtlProperty","rtlValue","value","container","layer","media","supports","Array","isArray","map","v","hyphenateProperty","join","rtlClassNameSelector","rtlCSSDeclaration","compileCSSRules"],"mappings":"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"}