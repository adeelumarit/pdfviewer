{"version":3,"sources":["useDomAnnounce.js"],"sourcesContent":["import { useFluent_unstable as useFluent } from '@fluentui/react-shared-contexts';\nimport { createPriorityQueue, useTimeout } from '@fluentui/react-utilities';\nimport * as React from 'react';\n/** The duration the message needs to be in present in DOM for screen readers to register a change and announce */ const MESSAGE_DURATION = 500;\nconst VISUALLY_HIDDEN_STYLES = {\n    clip: 'rect(0px, 0px, 0px, 0px)',\n    height: '1px',\n    margin: '-1px',\n    width: '1px',\n    position: 'absolute',\n    overflow: 'hidden',\n    textWrap: 'nowrap'\n};\n/* INTERNAL: implementation of the announcer using a live region element */ export const useDomAnnounce_unstable = ()=>{\n    const { targetDocument } = useFluent();\n    const timeoutRef = React.useRef(undefined);\n    const [setAnnounceTimeout, clearAnnounceTimeout] = useTimeout();\n    const elementRef = React.useRef(null);\n    const order = React.useRef(0);\n    // investigate alert implementation later\n    // const [alertList, setAlertList] = React.useState<string[]>([]);\n    const batchMessages = React.useRef([]);\n    const [messageQueue] = React.useState(()=>createPriorityQueue((a, b)=>{\n            if (a.priority !== b.priority) {\n                return b.priority - a.priority;\n            }\n            return a.createdAt - b.createdAt;\n        }));\n    const queueMessage = React.useCallback(()=>{\n        if (timeoutRef.current || !elementRef.current) {\n            return;\n        }\n        const runCycle = ()=>{\n            if (!elementRef.current) {\n                return;\n            }\n            if (targetDocument && messageQueue.peek()) {\n                // need a wrapping element for Narrator/Edge, which currently does not pick up text-only live region changes\n                // consistently\n                // if this is fixed, we can set textContent to the string directly\n                const wrappingEl = targetDocument.createElement('span');\n                wrappingEl.innerText = messageQueue.all().filter((msg)=>msg.message.trim().length > 0).reduce((prevText, currMsg)=>prevText + currMsg.message + '. ', '');\n                elementRef.current.innerText = '';\n                elementRef.current.appendChild(wrappingEl);\n                messageQueue.clear();\n                batchMessages.current = [];\n                // begin new cycle to clear (or update) messages\n                timeoutRef.current = setAnnounceTimeout(()=>{\n                    runCycle();\n                }, MESSAGE_DURATION);\n            } else {\n                elementRef.current.textContent = '';\n                clearAnnounceTimeout();\n                timeoutRef.current = undefined;\n            }\n        };\n        runCycle();\n    }, [\n        clearAnnounceTimeout,\n        messageQueue,\n        setAnnounceTimeout,\n        targetDocument\n    ]);\n    const announce = React.useCallback((message, options = {})=>{\n        const { alert = false, priority = 0, batchId } = options;\n        // check if message is an alert\n        if (alert) {\n        // TODO: alert implementation\n        // setAlertList([...alertList, message]);\n        }\n        const liveMessage = {\n            message,\n            createdAt: order.current++,\n            priority,\n            batchId\n        };\n        // check if batchId exists\n        if (batchId) {\n            // update associated msg if it does\n            const batchMessage = batchMessages.current.find((msg)=>msg.batchId === batchId);\n            if (batchMessage) {\n                // replace existing message in queue\n                messageQueue.remove(batchMessage.message);\n                // update list of existing batchIds w/ most recent message\n                batchMessage.message = liveMessage;\n            } else {\n                // update list of existing batchIds, add new if doesn't already exist\n                batchMessages.current = [\n                    ...batchMessages.current,\n                    {\n                        batchId,\n                        message: liveMessage\n                    }\n                ];\n            }\n        }\n        // add new message\n        messageQueue.enqueue(liveMessage);\n        queueMessage();\n    }, [\n        messageQueue,\n        queueMessage\n    ]);\n    React.useEffect(()=>{\n        if (!targetDocument) {\n            return;\n        }\n        const element = targetDocument.createElement('div');\n        element.setAttribute('aria-live', 'assertive');\n        Object.assign(element.style, VISUALLY_HIDDEN_STYLES);\n        targetDocument.body.append(element);\n        elementRef.current = element;\n        return ()=>{\n            element.remove();\n            elementRef.current = null;\n            clearAnnounceTimeout();\n            timeoutRef.current = undefined;\n        };\n    }, [\n        clearAnnounceTimeout,\n        targetDocument\n    ]);\n    return announce;\n};\n"],"names":["useDomAnnounce_unstable","MESSAGE_DURATION","VISUALLY_HIDDEN_STYLES","clip","height","margin","width","position","overflow","textWrap","targetDocument","useFluent","timeoutRef","React","useRef","undefined","setAnnounceTimeout","clearAnnounceTimeout","useTimeout","elementRef","order","batchMessages","messageQueue","useState","createPriorityQueue","a","b","priority","createdAt","queueMessage","useCallback","current","runCycle","peek","wrappingEl","createElement","innerText","all","filter","msg","message","trim","length","reduce","prevText","currMsg","appendChild","clear","textContent","announce","options","alert","batchId","liveMessage","batchMessage","find","remove","enqueue","useEffect","element","setAttribute","Object","assign","style","body","append"],"mappings":";;;;+BAayFA;;;eAAAA;;;;qCAbzC;gCACA;iEACzB;AACvB,gHAAgH,GAAG,MAAMC,mBAAmB;AAC5I,MAAMC,yBAAyB;IAC3BC,MAAM;IACNC,QAAQ;IACRC,QAAQ;IACRC,OAAO;IACPC,UAAU;IACVC,UAAU;IACVC,UAAU;AACd;AACmF,MAAMT,0BAA0B;IAC/G,MAAM,EAAEU,cAAc,EAAE,GAAGC,IAAAA,uCAAS;IACpC,MAAMC,aAAaC,OAAMC,MAAM,CAACC;IAChC,MAAM,CAACC,oBAAoBC,qBAAqB,GAAGC,IAAAA,0BAAU;IAC7D,MAAMC,aAAaN,OAAMC,MAAM,CAAC;IAChC,MAAMM,QAAQP,OAAMC,MAAM,CAAC;IAC3B,yCAAyC;IACzC,kEAAkE;IAClE,MAAMO,gBAAgBR,OAAMC,MAAM,CAAC,EAAE;IACrC,MAAM,CAACQ,aAAa,GAAGT,OAAMU,QAAQ,CAAC,IAAIC,IAAAA,mCAAmB,EAAC,CAACC,GAAGC;YAC1D,IAAID,EAAEE,QAAQ,KAAKD,EAAEC,QAAQ,EAAE;gBAC3B,OAAOD,EAAEC,QAAQ,GAAGF,EAAEE,QAAQ;YAClC;YACA,OAAOF,EAAEG,SAAS,GAAGF,EAAEE,SAAS;QACpC;IACJ,MAAMC,eAAehB,OAAMiB,WAAW,CAAC;QACnC,IAAIlB,WAAWmB,OAAO,IAAI,CAACZ,WAAWY,OAAO,EAAE;YAC3C;QACJ;QACA,MAAMC,WAAW;YACb,IAAI,CAACb,WAAWY,OAAO,EAAE;gBACrB;YACJ;YACA,IAAIrB,kBAAkBY,aAAaW,IAAI,IAAI;gBACvC,4GAA4G;gBAC5G,eAAe;gBACf,kEAAkE;gBAClE,MAAMC,aAAaxB,eAAeyB,aAAa,CAAC;gBAChDD,WAAWE,SAAS,GAAGd,aAAae,GAAG,GAAGC,MAAM,CAAC,CAACC,MAAMA,IAAIC,OAAO,CAACC,IAAI,GAAGC,MAAM,GAAG,GAAGC,MAAM,CAAC,CAACC,UAAUC,UAAUD,WAAWC,QAAQL,OAAO,GAAG,MAAM;gBACtJrB,WAAWY,OAAO,CAACK,SAAS,GAAG;gBAC/BjB,WAAWY,OAAO,CAACe,WAAW,CAACZ;gBAC/BZ,aAAayB,KAAK;gBAClB1B,cAAcU,OAAO,GAAG,EAAE;gBAC1B,gDAAgD;gBAChDnB,WAAWmB,OAAO,GAAGf,mBAAmB;oBACpCgB;gBACJ,GAAG/B;YACP,OAAO;gBACHkB,WAAWY,OAAO,CAACiB,WAAW,GAAG;gBACjC/B;gBACAL,WAAWmB,OAAO,GAAGhB;YACzB;QACJ;QACAiB;IACJ,GAAG;QACCf;QACAK;QACAN;QACAN;KACH;IACD,MAAMuC,WAAWpC,OAAMiB,WAAW,CAAC,CAACU,SAASU,UAAU,CAAC,CAAC;QACrD,MAAM,EAAEC,QAAQ,KAAK,EAAExB,WAAW,CAAC,EAAEyB,OAAO,EAAE,GAAGF;QACjD,+BAA+B;QAC/B,IAAIC,OAAO;QACX,6BAA6B;QAC7B,yCAAyC;QACzC;QACA,MAAME,cAAc;YAChBb;YACAZ,WAAWR,MAAMW,OAAO;YACxBJ;YACAyB;QACJ;QACA,0BAA0B;QAC1B,IAAIA,SAAS;YACT,mCAAmC;YACnC,MAAME,eAAejC,cAAcU,OAAO,CAACwB,IAAI,CAAC,CAAChB,MAAMA,IAAIa,OAAO,KAAKA;YACvE,IAAIE,cAAc;gBACd,oCAAoC;gBACpChC,aAAakC,MAAM,CAACF,aAAad,OAAO;gBACxC,0DAA0D;gBAC1Dc,aAAad,OAAO,GAAGa;YAC3B,OAAO;gBACH,qEAAqE;gBACrEhC,cAAcU,OAAO,GAAG;uBACjBV,cAAcU,OAAO;oBACxB;wBACIqB;wBACAZ,SAASa;oBACb;iBACH;YACL;QACJ;QACA,kBAAkB;QAClB/B,aAAamC,OAAO,CAACJ;QACrBxB;IACJ,GAAG;QACCP;QACAO;KACH;IACDhB,OAAM6C,SAAS,CAAC;QACZ,IAAI,CAAChD,gBAAgB;YACjB;QACJ;QACA,MAAMiD,UAAUjD,eAAeyB,aAAa,CAAC;QAC7CwB,QAAQC,YAAY,CAAC,aAAa;QAClCC,OAAOC,MAAM,CAACH,QAAQI,KAAK,EAAE7D;QAC7BQ,eAAesD,IAAI,CAACC,MAAM,CAACN;QAC3BxC,WAAWY,OAAO,GAAG4B;QACrB,OAAO;YACHA,QAAQH,MAAM;YACdrC,WAAWY,OAAO,GAAG;YACrBd;YACAL,WAAWmB,OAAO,GAAGhB;QACzB;IACJ,GAAG;QACCE;QACAP;KACH;IACD,OAAOuC;AACX"}