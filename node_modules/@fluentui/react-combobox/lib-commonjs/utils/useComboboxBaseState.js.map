{"version":3,"sources":["useComboboxBaseState.js"],"sourcesContent":["import * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport { useControllableState, useEventCallback, useFirstMount } from '@fluentui/react-utilities';\nimport { useOptionCollection } from '../utils/useOptionCollection';\nimport { useSelection } from '../utils/useSelection';\n/**\n * @internal\n * State shared between Combobox and Dropdown components\n */ export const useComboboxBaseState = (props)=>{\n    const { appearance = 'outline', children, clearable = false, editable = false, inlinePopup = false, mountNode = undefined, multiselect, onOpenChange, size = 'medium', activeDescendantController, freeform = false, disabled = false, onActiveOptionChange = null } = props;\n    const optionCollection = useOptionCollection();\n    const { getOptionsMatchingValue } = optionCollection;\n    const { getOptionById } = optionCollection;\n    const getActiveOption = React.useCallback(()=>{\n        const activeOptionId = activeDescendantController.active();\n        return activeOptionId ? getOptionById(activeOptionId) : undefined;\n    }, [\n        activeDescendantController,\n        getOptionById\n    ]);\n    // Keeping some kind of backwards compatible functionality here\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    const UNSAFE_activeOption = getActiveOption();\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    const UNSAFE_setActiveOption = React.useCallback((option)=>{\n        let nextOption = undefined;\n        if (typeof option === 'function') {\n            const activeOption = getActiveOption();\n            nextOption = option(activeOption);\n        }\n        if (nextOption) {\n            activeDescendantController.focus(nextOption.id);\n        } else {\n            activeDescendantController.blur();\n        }\n    }, [\n        activeDescendantController,\n        getActiveOption\n    ]);\n    // track whether keyboard focus outline should be shown\n    // tabster/keyborg doesn't work here, since the actual keyboard focus target doesn't move\n    const [focusVisible, setFocusVisible] = React.useState(false);\n    // track focused state to conditionally render collapsed listbox\n    // when the trigger is focused - the listbox should but hidden until the open state is changed\n    const [hasFocus, setHasFocus] = React.useState(false);\n    const ignoreNextBlur = React.useRef(false);\n    // calculate value based on props, internal value changes, and selected options\n    const isFirstMount = useFirstMount();\n    const [controllableValue, setValue] = useControllableState({\n        state: props.value,\n        initialState: undefined\n    });\n    const { selectedOptions, selectOption: baseSelectOption, clearSelection } = useSelection(props);\n    // reset any typed value when an option is selected\n    const selectOption = React.useCallback((ev, option)=>{\n        ReactDOM.unstable_batchedUpdates(()=>{\n            setValue(undefined);\n            baseSelectOption(ev, option);\n        });\n    }, [\n        setValue,\n        baseSelectOption\n    ]);\n    const value = React.useMemo(()=>{\n        // don't compute the value if it is defined through props or setValue,\n        if (controllableValue !== undefined) {\n            return controllableValue;\n        }\n        // handle defaultValue here, so it is overridden by selection\n        if (isFirstMount && props.defaultValue !== undefined) {\n            return props.defaultValue;\n        }\n        const selectedOptionsText = getOptionsMatchingValue((optionValue)=>{\n            return selectedOptions.includes(optionValue);\n        }).map((option)=>option.text);\n        if (multiselect) {\n            // editable inputs should not display multiple selected options in the input as text\n            return editable ? '' : selectedOptionsText.join(', ');\n        }\n        return selectedOptionsText[0];\n    // do not change value after isFirstMount changes,\n    // we do not want to accidentally override defaultValue on a second render\n    // unless another value is intentionally set\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [\n        controllableValue,\n        editable,\n        getOptionsMatchingValue,\n        multiselect,\n        props.defaultValue,\n        selectedOptions\n    ]);\n    // Handle open state, which is shared with options in context\n    const [open, setOpenState] = useControllableState({\n        state: props.open,\n        defaultState: props.defaultOpen,\n        initialState: false\n    });\n    const setOpen = React.useCallback((event, newState)=>{\n        if (disabled) {\n            return;\n        }\n        onOpenChange === null || onOpenChange === void 0 ? void 0 : onOpenChange(event, {\n            open: newState\n        });\n        ReactDOM.unstable_batchedUpdates(()=>{\n            if (!newState && !freeform) {\n                setValue(undefined);\n            }\n            setOpenState(newState);\n        });\n    }, [\n        onOpenChange,\n        setOpenState,\n        setValue,\n        freeform,\n        disabled\n    ]);\n    // update active option based on change in open state\n    React.useEffect(()=>{\n        if (open) {\n            // if it is single-select and there is a selected option, start at the selected option\n            if (!multiselect && selectedOptions.length > 0) {\n                const selectedOption = getOptionsMatchingValue((v)=>v === selectedOptions[0]).pop();\n                if (selectedOption === null || selectedOption === void 0 ? void 0 : selectedOption.id) {\n                    activeDescendantController.focus(selectedOption.id);\n                }\n            }\n        } else {\n            activeDescendantController.blur();\n        }\n    // this should only be run in response to changes in the open state or children\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [\n        open,\n        activeDescendantController\n    ]);\n    // Fallback focus when children are updated in an open popover results in no item being focused\n    React.useEffect(()=>{\n        if (open) {\n            if (!activeDescendantController.active()) {\n                activeDescendantController.first();\n            }\n        }\n    // this should only be run in response to changes in the open state or children\n    }, [\n        open,\n        children,\n        activeDescendantController,\n        getOptionById\n    ]);\n    const onActiveDescendantChange = useEventCallback((event)=>{\n        const previousOption = event.detail.previousId ? optionCollection.getOptionById(event.detail.previousId) : null;\n        const nextOption = optionCollection.getOptionById(event.detail.id);\n        onActiveOptionChange === null || onActiveOptionChange === void 0 ? void 0 : onActiveOptionChange(event, {\n            event,\n            type: 'change',\n            previousOption,\n            nextOption\n        });\n    });\n    return {\n        ...optionCollection,\n        freeform,\n        disabled,\n        selectOption,\n        clearSelection,\n        selectedOptions,\n        activeOption: UNSAFE_activeOption,\n        appearance,\n        clearable,\n        focusVisible,\n        ignoreNextBlur,\n        inlinePopup,\n        mountNode,\n        open,\n        hasFocus,\n        setActiveOption: UNSAFE_setActiveOption,\n        setFocusVisible,\n        setHasFocus,\n        setOpen,\n        setValue,\n        size,\n        value,\n        multiselect,\n        onOptionClick: useEventCallback((e)=>{\n            if (!multiselect) {\n                setOpen(e, false);\n            }\n        }),\n        onActiveDescendantChange\n    };\n};\n"],"names":["useComboboxBaseState","props","appearance","children","clearable","editable","inlinePopup","mountNode","undefined","multiselect","onOpenChange","size","activeDescendantController","freeform","disabled","onActiveOptionChange","optionCollection","useOptionCollection","getOptionsMatchingValue","getOptionById","getActiveOption","React","useCallback","activeOptionId","active","UNSAFE_activeOption","UNSAFE_setActiveOption","option","nextOption","activeOption","focus","id","blur","focusVisible","setFocusVisible","useState","hasFocus","setHasFocus","ignoreNextBlur","useRef","isFirstMount","useFirstMount","controllableValue","setValue","useControllableState","state","value","initialState","selectedOptions","selectOption","baseSelectOption","clearSelection","useSelection","ev","ReactDOM","unstable_batchedUpdates","useMemo","defaultValue","selectedOptionsText","optionValue","includes","map","text","join","open","setOpenState","defaultState","defaultOpen","setOpen","event","newState","useEffect","length","selectedOption","v","pop","first","onActiveDescendantChange","useEventCallback","previousOption","detail","previousId","type","setActiveOption","onOptionClick","e"],"mappings":"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"}