{"version":3,"sources":["useDrawerBody.js"],"sourcesContent":["import * as React from 'react';\nimport { mergeCallbacks, slot, useAnimationFrame, useMergedRefs, useIsomorphicLayoutEffect, getIntrinsicElementProps } from '@fluentui/react-utilities';\nimport { useDrawerContext_unstable } from '../../contexts/drawerContext';\n/**\n * @internal\n *\n * Get the current scroll state of the DrawerBody.\n *\n * @param param0 - HTMLElement to check scroll state of\n */ const getScrollState = ({ scrollTop, scrollHeight, clientHeight })=>{\n    if (scrollHeight <= clientHeight) {\n        return 'none';\n    }\n    if (scrollTop === 0) {\n        return 'top';\n    }\n    if (scrollTop + clientHeight === scrollHeight) {\n        return 'bottom';\n    }\n    return 'middle';\n};\n/**\n * Create the state required to render DrawerBody.\n *\n * The returned state can be modified with hooks such as useDrawerBodyStyles_unstable,\n * before being passed to renderDrawerBody_unstable.\n *\n * @param props - props from this instance of DrawerBody\n * @param ref - reference to root HTMLElement of DrawerBody\n */ export const useDrawerBody_unstable = (props, ref)=>{\n    const { setScrollState } = useDrawerContext_unstable();\n    const scrollRef = React.useRef(null);\n    const [setAnimationFrame, cancelAnimationFrame] = useAnimationFrame();\n    const onScroll = React.useCallback(()=>{\n        cancelAnimationFrame();\n        setAnimationFrame(()=>{\n            if (!scrollRef.current) {\n                return;\n            }\n            setScrollState(getScrollState(scrollRef.current));\n        });\n    }, [\n        cancelAnimationFrame,\n        setAnimationFrame,\n        setScrollState\n    ]);\n    useIsomorphicLayoutEffect(()=>{\n        if (!scrollRef.current) {\n            return;\n        }\n        setScrollState(getScrollState(scrollRef.current));\n        return ()=>cancelAnimationFrame();\n    }, [\n        cancelAnimationFrame,\n        setScrollState\n    ]);\n    return {\n        components: {\n            root: 'div'\n        },\n        root: slot.always(getIntrinsicElementProps('div', {\n            // FIXME:\n            // `ref` is wrongly assigned to be `HTMLElement` instead of `HTMLDivElement`\n            // but since it would be a breaking change to fix it, we are casting ref to it's proper type\n            ref: useMergedRefs(ref, scrollRef),\n            ...props,\n            onScroll: mergeCallbacks(props.onScroll, onScroll)\n        }), {\n            elementType: 'div'\n        })\n    };\n};\n"],"names":["useDrawerBody_unstable","getScrollState","scrollTop","scrollHeight","clientHeight","props","ref","setScrollState","useDrawerContext_unstable","scrollRef","React","useRef","setAnimationFrame","cancelAnimationFrame","useAnimationFrame","onScroll","useCallback","current","useIsomorphicLayoutEffect","components","root","slot","always","getIntrinsicElementProps","useMergedRefs","mergeCallbacks","elementType"],"mappings":";;;;+BA6BiBA;;;eAAAA;;;;iEA7BM;gCACqG;+BAClF;AAC1C;;;;;;CAMC,GAAG,MAAMC,iBAAiB,CAAC,EAAEC,SAAS,EAAEC,YAAY,EAAEC,YAAY,EAAE;IACjE,IAAID,gBAAgBC,cAAc;QAC9B,OAAO;IACX;IACA,IAAIF,cAAc,GAAG;QACjB,OAAO;IACX;IACA,IAAIA,YAAYE,iBAAiBD,cAAc;QAC3C,OAAO;IACX;IACA,OAAO;AACX;AASW,MAAMH,yBAAyB,CAACK,OAAOC;IAC9C,MAAM,EAAEC,cAAc,EAAE,GAAGC,IAAAA,wCAAyB;IACpD,MAAMC,YAAYC,OAAMC,MAAM,CAAC;IAC/B,MAAM,CAACC,mBAAmBC,qBAAqB,GAAGC,IAAAA,iCAAiB;IACnE,MAAMC,WAAWL,OAAMM,WAAW,CAAC;QAC/BH;QACAD,kBAAkB;YACd,IAAI,CAACH,UAAUQ,OAAO,EAAE;gBACpB;YACJ;YACAV,eAAeN,eAAeQ,UAAUQ,OAAO;QACnD;IACJ,GAAG;QACCJ;QACAD;QACAL;KACH;IACDW,IAAAA,yCAAyB,EAAC;QACtB,IAAI,CAACT,UAAUQ,OAAO,EAAE;YACpB;QACJ;QACAV,eAAeN,eAAeQ,UAAUQ,OAAO;QAC/C,OAAO,IAAIJ;IACf,GAAG;QACCA;QACAN;KACH;IACD,OAAO;QACHY,YAAY;YACRC,MAAM;QACV;QACAA,MAAMC,oBAAI,CAACC,MAAM,CAACC,IAAAA,wCAAwB,EAAC,OAAO;YAC9C,SAAS;YACT,4EAA4E;YAC5E,4FAA4F;YAC5FjB,KAAKkB,IAAAA,6BAAa,EAAClB,KAAKG;YACxB,GAAGJ,KAAK;YACRU,UAAUU,IAAAA,8BAAc,EAACpB,MAAMU,QAAQ,EAAEA;QAC7C,IAAI;YACAW,aAAa;QACjB;IACJ;AACJ"}